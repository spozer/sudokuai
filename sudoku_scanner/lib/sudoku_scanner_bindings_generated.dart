// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/sudoku_scanner.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class SudokuScannerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SudokuScannerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SudokuScannerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<BoundingBox> detect_grid(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _detect_grid(
      path,
    );
  }

  late final _detect_gridPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BoundingBox> Function(
              ffi.Pointer<ffi.Char>)>>('detect_grid');
  late final _detect_grid = _detect_gridPtr
      .asFunction<ffi.Pointer<BoundingBox> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Uint8> extract_grid(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<BoundingBox> bounding_box,
  ) {
    return _extract_grid(
      path,
      bounding_box,
    );
  }

  late final _extract_gridPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<BoundingBox>)>>('extract_grid');
  late final _extract_grid = _extract_gridPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<BoundingBox>)>();

  ffi.Pointer<ffi.Uint8> extract_grid_from_roi(
    ffi.Pointer<ffi.Char> path,
    int roi_size,
    int roi_offset,
  ) {
    return _extract_grid_from_roi(
      path,
      roi_size,
      roi_offset,
    );
  }

  late final _extract_grid_from_roiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Int32)>>('extract_grid_from_roi');
  late final _extract_grid_from_roi = _extract_grid_from_roiPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Char>, int, int)>();

  void set_model(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _set_model(
      path,
    );
  }

  late final _set_modelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'set_model');
  late final _set_model =
      _set_modelPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void free_pointer(
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return _free_pointer(
      pointer,
    );
  }

  late final free_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free_pointer');
  late final _free_pointer =
      free_pointerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

final class Offset extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class BoundingBox extends ffi.Struct {
  external Offset top_left;

  external Offset top_right;

  external Offset bottom_left;

  external Offset bottom_right;
}
